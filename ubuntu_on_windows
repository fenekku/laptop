#!/bin/sh

# Welcome to the_setup - ubuntu on windows edition script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.
#
# Run this as normal user:
#
#   sh ubuntu_on_windows
#
# You will be prompted for sudo access when necessary


set -e

# Configuration variables
PYTHON2=2.7.15
PYTHON3=3.6.5

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n*the_setup: $fmt\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "the_setup failed\n\n" >&2; exit $ret' EXIT


# Packages
PKG_DEV="build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev"
PKG_INSTALLER="python-virtualenv gdebi-core apt-transport-https ca-certificates software-properties-common emacs-nox"
PKG_GIT="git-core"
# PKG_JAVA  # TODO

# Make system packages up-to-date
sudo apt update
sudo apt --yes upgrade
sudo apt install --yes $PKG_DEV $PKG_INSTALLER $PKG_GIT


# Setup directories
if [ ! -d "$HOME/bin/" ]; then
  mkdir "$HOME/bin"
fi


fancy_echo "Setting up Python ..."
# pyenv
wget --quiet https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer --output-document=- | bash
echo ""
# pythons
export PATH=$HOME/.pyenv/bin:$PATH
echo "$(pyenv --version)"
if [ ! -d "$HOME/.pyenv/versions/$PYTHON3" ]; then
	pyenv install $PYTHON3
fi
if [ ! -d "$HOME/.pyenv/versions/$PYTHON2" ]; then
	pyenv install $PYTHON2
fi
# No python binary in Bionic for instance
if [ ! -e /usr/bin/python ]; then
  sudo ln -s /usr/bin/python3 /usr/bin/python
fi
# pipsi
pyenv global system
wget --quiet https://raw.githubusercontent.com/mitsuhiko/pipsi/master/get-pipsi.py --directory-prefix=/tmp/
python /tmp/get-pipsi.py --src=git+https://github.com/mitsuhiko/pipsi.git
export PATH=$HOME/.local/bin:$PATH
echo "$(pipsi --version)"
# pipenv
pipsi install pew
pipsi install pipenv
pyenv global $PYTHON3
echo "$(python --version)"


fancy_echo "Setting up your dotfiles ..."
homeshick=$HOME/.homesick/repos/homeshick
if [ ! -d $homeshick ]; then
  git clone git://github.com/andsens/homeshick.git $homeshick
fi
$homeshick/bin/homeshick clone fenekku/dotfiles
$homeshick/bin/homeshick link --force dotfiles  # even with --force it asks


fancy_echo "Installing additional PPAs ..."
# Fish
sudo apt-add-repository --yes ppa:fish-shell/release-2
# Node
wget --quiet https://deb.nodesource.com/setup_8.x --output-document=- | sudo --preserve-env bash -


sudo apt update


fancy_echo "Installing Fish, Node ..."
sudo apt install --yes fish nodejs


fancy_echo "Changing your shell to fish ..."
shell_path="$(which fish)"
sudo chsh "$USER" --shell "$shell_path"


fancy_echo "Installing the Heroku Toolbelt ..."
wget --quiet https://cli-assets.heroku.com/install-ubuntu.sh --output-document=- | sh


fancy_echo "Installing fd ..."
mkdir -p $packages/fd
wget --quiet https://github.com/sharkdp/fd/releases/download/v7.0.0/fd-musl_7.0.0_amd64.deb --output-document=$packages/fd/fd-musl_7.0.0_amd64.deb
sudo gdebi --non-interactive $packages/fd/fd-musl_7.0.0_amd64.deb


# GitHub
# "hub"  # TODO: Install hub?


if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi

fancy_echo "the_setup is complete!"
