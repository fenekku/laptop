#!/bin/sh

# Welcome to the_setup - ubuntu edition script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.
#
# Run this as normal user:
#
#   sh ubuntu
#
# You will be prompted for sudo access when necessary


set -e

# Configuration variables
DISTRIBUTION="xenial"
PYTHON2=2.7.14
PYTHON3=3.6.5

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n*the_setup: $fmt\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "the_setup failed\n\n" >&2; exit $ret' EXIT


# Packages
PKG_DEV="build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev llvm libncurses5-dev libncursesw5-dev tk-dev curl"
PKG_INSTALLER="python-virtualenv gdebi-core apt-transport-https ca-certificates software-properties-common"
PKG_GIT="git-core"
# PKG_JAVA  # TODO

# Make system packages up-to-date
sudo apt update
sudo apt --yes upgrade
sudo apt install --yes $PKG_DEV $PKG_INSTALLER $PKG_GIT


# Setup directories
if [ ! -d "$HOME/bin/" ]; then
  mkdir "$HOME/bin"
fi


fancy_echo "Setting up Python ..."
# pyenv
wget --quiet https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer --output-document=- | bash
# pythons
export PATH=$HOME/.pyenv/bin:$PATH
echo ""  # To separate out content
echo "$(pyenv --version)"
if [ ! -d "$HOME/.pyenv/versions/$PYTHON3" ]; then
    pyenv install $PYTHON3
fi
if [ ! -d "$HOME/.pyenv/versions/$PYTHON2" ]; then
    pyenv install $PYTHON2
fi
# No python binary in Bionic for instance
if [ ! -e /usr/bin/python ]; then
  sudo ln --symbolic /usr/bin/python3 /usr/bin/python
fi
# pipsi
pyenv global system
if [ ! -e "$HOME/.local/bin/pipsi" ]; then
  wget --quiet https://raw.githubusercontent.com/mitsuhiko/pipsi/master/get-pipsi.py --directory-prefix=/tmp/
  python /tmp/get-pipsi.py --src=git+https://github.com/mitsuhiko/pipsi.git
fi
export PATH=$HOME/.local/bin:$PATH
echo "$(pipsi --version)"
# pipenv
if [[ ! $(pipsi list | grep 'pipenv') ]]; then
  pipsi install pew
  pipsi install pipenv
fi
pyenv global $PYTHON3
echo "Your Python is now: $(python --version)"


fancy_echo "Setting up your dotfiles ..."
homeshick=$HOME/.homesick/repos/homeshick
if [ ! -d $homeshick ]; then
  git clone git://github.com/andsens/homeshick.git $homeshick
  $homeshick/bin/homeshick clone fenekku/dotfiles
  $homeshick/bin/homeshick link --force dotfiles  # even with --force it asks
fi


fancy_echo "Installing additional PPAs ..."
# Fish
sudo apt-add-repository --yes ppa:fish-shell/release-2
# Ulauncher
sudo apt-add-repository --yes ppa:agornostal/ulauncher
# SublimeText
wget --quiet https://download.sublimetext.com/sublimehq-pub.gpg --output-document=- | sudo apt-key add -
echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
# Docker
wget --quiet https://download.docker.com/linux/ubuntu/gpg --output-document=- | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
# Node
wget --quiet https://deb.nodesource.com/setup_8.x --output-document=- | sudo --preserve-env bash -


sudo apt update


fancy_echo "Installing Fish, SublimeText, Docker, Node ..."
sudo apt install --yes fish sublime-text docker-ce nodejs ulauncher
sudo usermod --append --groups docker $USER


DC_VERSION=1.21.2
fancy_echo "Installing docker-compose $DC_VERSION..."
sudo wget --quiet https://github.com/docker/compose/releases/download/$DC_VERSION/docker-compose-$(uname -s)-$(uname -m) --output-document=/usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
docker-compose --version


fancy_echo "Changing your shell to fish ..."
shell_path="$(which fish)"
sudo chsh "$USER" --shell "$shell_path"


fancy_echo "Installing Dropbox ..."
packages=~/Downloads/Packages
mkdir -p $packages/Dropbox
wget --quiet --timestamping https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2015.10.28_amd64.deb --output-document=$packages/Dropbox/dropbox_2015.10.28_amd64.deb
sudo gdebi --non-interactive $packages/Dropbox/dropbox_2015.10.28_amd64.deb


fancy_echo "Installing the Heroku Toolbelt ..."
wget --quiet https://cli-assets.heroku.com/install-ubuntu.sh --output-document=- | sh


# GitHub
# "hub"  # TODO: Install hub?


# Virtualbox - Uncomment if you want
# text="deb https://download.virtualbox.org/virtualbox/debian $DISTRIBUTION contrib"
# sudo printf "\n%s\n" "$text" >> "/etc/apt/sources.list"
# wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -


if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi

sudo apt autoremove

fancy_echo "the_setup is complete! Restart your computer to conclude installation."
